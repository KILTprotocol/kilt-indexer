# To improve query performance, we strongly suggest adding indexes to any field that you plan to filter or sort by
# Add the `@index` or `@index(unique: true)` annotation after any non-key field
# https://academy.subquery.network/build/graphql.html#indexing-by-non-primary-key-field

type Block @entity {
  """
  <Block ordinal number from genesis block> fixed length of 9 digits, prefixed with insignificant zeros
  """
  id: ID!
  # The biggest possible block number on chain has 20 places (=u64).
  # To allow ordering by block number (=id), we need to prefix them with insignificant zeros, because IDs are always strings.
  # Currently (at ~7.5M blocks), only 7 significant places are being used. It would take more than 380 years to produce 1 billion blocks.
  # By normalizing block numbers to 9 digits, we are set up for the next 377 years.
  """
  Block Hash as hex-string
  """
  hash: String! @index(unique: true)
  """
  Date of creation of this block
  """
  timeStamp: Date!
}

## For Credentials:

type Attestation @entity {
  """
  <Block number> + "-" + <ordinal number within block>
  """
  id: ID!
  """
  hash of the credential claims (not unique)
  """
  claimHash: String! @index
  """
  CType used to structure the claims being attested
  """
  cType: CType! @index
  """
  DID of credential issuer and on-chain attester
  """
  issuer: Did! @index
  """
  account address
  """
  payer: String!
  delegationID: String
  valid: Boolean! @index
  creationBlock: Block!
  revocationBlock: Block
  removalBlock: Block
}

"""
This is an Aggregation Entity allowing us to calculate all the attestations created, revoked and removed per CType.

A CType is a Claim Type.
It structures the content (claims) of a credential.
"""
type CType @entity {
  """
  "kilt:ctype:" + <CType hash>
  """
  id: ID!
  registrationBlock: Block!
  """
  DID of the creator
  """
  author: Did! @index
  """
  DID of the creator
  """
  definition: String!
  attestationsCreated: Int!
  attestationsRevoked: Int!
  """
  either valid or revoked credentials can be removed
  """
  attestationsRemoved: Int!
  """
  number of credentials neither revoked nor removed
  """
  validAttestations: Int!
}

## For DIDs:

type Did @entity {
  """
  "did:kilt:" + <identifier (encoded as KILT address)>
  """
  id: ID!
  """
  owner account address
  """
  payer: String! @index
  creationBlock: Block!
  deletionBlock: Block
  """
  Web3Name used as alias, only the current one
  """
  web3name: Web3Name
  """
  whether it has been deactivated or not
  """
  active: Boolean!
}

type Web3Name @entity {
  """
  "w3n:" + <user name>
  """
  id: ID!
  banned: Boolean!
  ownerships: [Ownership]! @derivedFrom(field: "name")
}

type Ownership @entity {
  """
  "#" + <ordinal number> + "_" + "w3n:" + <user name>
  """
  id: ID!
  name: Web3Name! @index
  bearer: Did! @index
  claimBlock: Block!
  releaseBlock: Block
}

enum SanctionNature {
  permission
  prohibition
}

type Sanction @entity {
  """
  "ยง" + <ordinal number> + "_" + "w3n:" + <user name>
  """
  id: ID!
  nature: SanctionNature!
  name: Web3Name! @index
  enforcementBlock: Block!
}

## For AssetDIDs:

type Chain @entity {
  """
  <chain-namespace> + ":" + <chain-reference> = caip-2-chain-id
  """
  id: ID!
  namespace: String!
  reference: String!
}

type Asset @entity {
  """
  <asset-namespace> + ":" + <asset-reference> + [":" + <asset-id>]
  """
  id: ID!
  namespace: String!
  reference: String!
  identifier: String
}

type AssetDID @entity {
  """
  "did:asset:" + <chain-namespace> + ":" + <chain-reference> + <asset-namespace> + ":" + <asset-reference> + [":" + <asset-id>]
  """
  id: ID!
  chain: Chain!
  asset: Asset!
}

type PublicCredential @entity {
  """
  <credential-hash>
  """
  id: ID!
  subject: AssetDID! @index
  cType: CType!
  issuer: Did! @index
  """
  content of the credential
  """
  claims: String!
  delegationID: String
  valid: Boolean!
  updates: [Update]! @derivedFrom(field: "credential")
}

enum UpdateNature {
  creation
  revocation
  """
  un-revocation
  """
  restoration
  removal
}

type Update @entity {
  """
  "*" + <ordinal number> + "_" + <credential-hash>
  """
  id: ID!
  credential: PublicCredential!
  nature: UpdateNature!
  updateBlock: Block!
}
